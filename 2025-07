7/23
習得した知識:

npm run devの仕組みと役割を理解し、現代のフロントエンド開発における標準的なワークフローを把握
JSXファイル拡張子(.jsx vs .js)の違いとプロジェクト設定による柔軟性を学習
MainGoalコンポーネントの実装を通じて、コンポーネントの作成・エクスポート・使用の基本フローを体験
Reactの理解度チェックで、コンポーネント組み合わせの利点とJSXの基本概念を確認
重点的に復習した内容:

Reactコンポーネントの定義方法（関数コンポーネント、命名規則）
JSXの目的と仮想DOMの概念
カスタムコンポーネントの使用法とファイル構成の柔軟性

7/25 streamlitを使用してto doアプリ作成

7/27
データベースに関する学習を行った。to doアプリもデータベース連携行いたい。
MySQLをインストール

7/28
インデックス、制約に関し学習

7/29
alterを用いたテーブルの更新
テーブルの削除(DROP/TRUNCATE)

7/30
データの指定(SELECT/FROM)
SELECT..出力はデータ形式( 1|2 )
FROM..入力になるテーブルを指定することができる。例えば、「FROM で指定した入力テーブルに存在するカラムの内、表示したいカラムを SELECT で指定する」といった使い方。

出力するカラムを指定する時は、''' table_name.column_name '''
例)SELECT products.id, products.name FROM products;

全カラムを出力する場合は、カラムを指定する代わりに * を使用する。
SELECT products.* FROM products;

recursion 問題3つクリア

7/31
WHERE..入力テーブルから条件に合うレコードのみ抽出
例えば、products テーブルの id カラムが 1 のレコードを出力したい場合は、SELECT products.* FROM products WHERE products.id = 1; のように記述

この時の内部での処理は、以下。

一行目のレコードを見て、WHERE 句を評価。つまり、products.id = 1 を評価。
WHERE 句の評価が true であればその行は出力され、false であればその行は出力されない。
一行目のレコードの評価が完了したので、二行目のレコードへと移る。
上記を繰り返す。

NULLの扱い
IN句..列挙している値のいずれかを含む場合、true を返し、それ以外の場合、false を返す。

テーブル名を省略することができる。
SELECT * FROM products WHERE id = 1;
※1つのクエリで複数の入力テーブルを操作する場合はテーブル名の明示が必要。
