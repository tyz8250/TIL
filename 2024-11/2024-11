2024-11

11/11
TILのリポジトリを作成。
クラスを使用して、名前関数を作成すると、クラス外の関数との名前の被りがなくなる。

class MathThings():
    # 数値を受け取り、加算を実行
    def add(x,y):
        return x + y

# 文字列を受け取り、連結を実行
def add(s1, s2):
    return s1 + s2

# 名前空間のおかげで名前が衝突せずに済みます
print(MathThings.add(5,4))
print(add("hello", "world"))

11/12
git push -u origin main 
-u オプションはこれ以降、git push コマンドを実行する際に、ブランチ名を省略できる。

述語とは、真偽どちらかの答えを返す関数または式のこと。ある条件が真か偽かを判定することができる。

# 国を文字列として受け取り、言語を返す関数
def languageSetting(country):
    # 述語 country == "Japan" が true の場合、以下の処理が実行されます
    if country == "Japan": 
        return "ja"
 
print(languageSetting("Japan"))

if文の省略
関数の戻り値がブーリアン型であれば、if文を省略して、単に述語の結果を返すことができる。
if文は条件としてブール値を期待するので、if文を使わず、単純に述語の結果を直接返すことができる。

論理演算子
『かつ』を表す　論理積（＆＆）演算子

true && true
// true

true && false
// false

false && true
// false

false && false
// false

『または』を表す　論理和（||）演算子
true || true
// true

true || false
// true

false || true
// true

false || false
// false

等価演算子 != 

11/13
if文の文法
def isLeapYear(year):
    # 関数を完成させてください
    if year % 400 == 0 :
        return True
    elif year % 100 == 0  :
        return False
    elif year % 4  == 0 :
        return True

    ＃elif のあとは:不要

11/14
and not 

11/15
ライブラリ(library)関数を使用する場合は、以下3点の理解が必要。
その関数の目的
必要な入力
生成される出力
ライブラリの公式ドキュメントには、これらの情報が記載されている。


スライス構文
"I will go hiking near a ranch in Oregon."
 0123456789
 ”は含まない
•sentence[start:end] の形式で、start から end - 1 までの部分を取得する。
• end の位置は含まれない点が重要。

s[:i]は文字列sの先頭からi番目までの部分を取得する。（iは含まない）
s[i:]は文字列sのi番目以降の部分を取得する。
[-x:] で後ろから x 番目の文字から最後までを切り出すことができる。


11/16
import math //mathライブラリを使用できる。

import math

def vacationRental(people,day):
    # 関数を完成させてください
    if day >=10:
        perDay = 50
    elif day >= 4:
        perDay = 60
    else: 
        perDay = 80

    seisoukomi = people * day * perDay * 1.12

    totalPrice = seisoukomi *1.08

    return math.floor(totalPrice)

※初歩的だが、関数内の式のインデントは関数内部に記述すること
　defと同じインデントに記述すると、関数外とみなされる。

## Math ライブラリ
# 累乗を計算することができる pow 関数
# 3^4 を計算 (3 * 3 * 3 * 3)
print(math.pow(3,4))
 
# 2^5 を計算 (2 * 2 * 2 * 2 * 2)
print(math.pow(2,5))
 
# √2 を計算
print(math.sqrt(2))

数字が有理数か判断する方法
    if math.sqrt(number) % 1 == 0 :
        return True
    else:
        return False

数値を1で割った余りが存在しなければTrue
== をよく忘れる。

uppear //すべての文字を大文字に
lower //すべての文字を小文字に
find関数　inputが存在しない場合は-1を返す。

return not という表現
not演算子は論理否定を行う。
TrueをFalseに変換
FalseをTrueに変換

# replace 関数
# sentence の Oregon と California を入れ替えます
print(sentence.replace("Oregon", "California"))

11/17
recursion CS初級を終了
recursion　有料会員になった。

抽象化（abstraction）→プログラムをわかりやすくする
プログラムのなかで詳細を隠し、必要な情報だけを強調する考え方。

補助関数で出力した値を変数に入れないと、関数のreturn値として返すことができない。
def calculateLocation(latitude,longitude):
    def getLatitudeDirection(latitude):
        if latitude == 0:
            return "equator"
        elif latitude > 0:
            return "north"
        else:
            return "south"
    
    def getLongitudeDirection(longitude):
        if longitude == 0:
            return "prime meridian"
        elif longitude > 0:
            return "east"
        else:
            return "west"

    //以下2行のコードは記述しなくても良いと思っていた。
    latitudeDirection = getLatitudeDirection(latitude)　
    longitudeDirection = getLongitudeDirection(longitude)

    return latitudeDirection + "/" + longitudeDirection 
    # 関数を完成させてください


ドメインの切り取り（練習問題）

改善前（コードは動く）
def upperCaseDomain(email):
    # 関数を完成させてください
    location = email.find("@") + 1
    return email[location:len(email)].upper()


1.len(email) の使用: email[location:len(email)] の部分は email[location:] 
  と書くことで、より簡潔に表現できます。len(email) を明示的に書く必要はありません。

2.変数名の改善: location という変数名は、何の位置を示しているのかが少し曖昧です。at_index
  など、もう少し具体的な名前にすると、コードの可読性がさらに向上します。


改善後
def upperCaseDomain(email):
    # "@" の位置を見つける
    at_index = email.find("@") + 1
    # ドメイン部分を大文字に変換して返す
    return email[at_index:].upper()

平方根復習
import math
def distance(x,y):
    return math.sqrt(x **2 + y**2)

関数合成の注意点
・関数1つにつき、1つのタスク
・Don't Repeat Yourself (DRY)
    ・関数は繰り返し使用されることを意図しているので、何回も再利用ができる。
    ・同じコードを何回も書く必要がない。

11/18
関数の分解（functiom decomposition）
1つの大きなタスクをいくつかの小さなタスクに分けて、それぞれ独立した関数として定義すること。
・再利用性の向上
・可読性の向上
・デバックの容易性　というメリットがある。

数値の切り上げ
import math

# 数値を切り上げる例
number = 4.2
result = math.ceil(number)

print(result)  # 出力: 5

11/19
def processPayment(creditCardType, cost):
    # 合計金額を計算
    total = totalCost(creditCardType, cost)

    # 合計金額が300ドルを超える場合は-1.0を返す
    if total > 300:
        return -1.0
    else:
        return total
変数totalにtotalCost(creditCardType, cost)を代入することで可読性が向上する。

11/21
タワーオブテラー　クリア
再帰について学習
def infectedPeople(day):
    # 関数を完成させてください
    if day <= 0:
        return 1
    return infectedPeople(day -1) * 2

スタックオーバーフローとは、プログラムが実行中にスタック領域を超えてデータを格納しようとしたときに発生するエラーのことです。

def recursive_function():
    # 関数が終了条件なしで自分自身を呼び出し続ける
    return recursive_function()

# 関数を呼び出す
recursive_function()

このコードは、recursive_function が終了条件なしで無限に自分自身を呼び出し続けるため、スタックオーバーフローを引き起こします。

ベースケース(basecase):再帰関数において、関数に戻り値を保証し、ループを終了させるステートメント

コンピュータは一度無限ループに入ると、プログラムは無限ループから抜け出すことができない。

11/22
再帰は、関数が自分自身を呼び出すプログラム

11/23
Python では再帰の深さに制限があるため、非常に大きな n に対しては注意が必要

#入力が自然数であることの確認（負の整数や非整数を除く）
if not isinstance(n, int) or n < 0:
    raise ValueError("入力は0以上の整数でなければなりません。")


def squareSummation(n):
    # ベースケース: n が 0 の場合、平方和は 0
    if n == 0:
        return 0
    # 再帰ステップ: n の平方を加算し、n-1 に対して再帰的に計算
    return squareSummation(n-1) + n**2


文字の結合
def mergeString(s1, s2):
    # helper関数を定義
    def helper(index):
        # 終了条件：インデックスが文字列の長さに達したら空文字を返す
        if index >= len(s1):
            return ""
        
        # 現在のインデックスの文字列を交互に結合し、次のインデックスを処理
        return s1[index] + s2[index] + helper(index + 1)
    
    # 初期インデックス0でhelperを呼び出す
    return helper(0)

# テスト例
print(mergeString("abc", "xyz"))   # 出力: "axbycz"
print(mergeString("123", "456"))   # 出力: "142536"

if index + 1 >= len(s):  # 奇数文字で最後の1文字を処理
            return s[index]

def commonPrefix(s1, s2):
    # helper関数を定義
    def helper(index):
        # インデックスが文字列の長さを超えた場合、または文字が異なる場合、処理を終了する
        if index >= len(s1) or index >= len(s2) or s1[index] != s2[index]:
            return s1[:index]
        # 次のインデックスでhelperを再帰的に呼び出す
        return helper(index + 1)

    # 初期インデックス0でhelperを呼び出す
    return helper(0)

# 使用例
print(commonPrefix("flower", "flow"))  # 出力: "flow"
print(commonPrefix("dog", "racecar"))  # 出力: ""

・obsidianでコードコメント比較のメモ作成

11/24
文字のスライス
s[:-1]　#最後の文字を除外する
購入できる最大のパンの個数　の問題を後日やりなおす

11/25
何もできず
11/26
コーディング問題を行う日を決める
数字を分割して足す　取組中
総和の総和を受講中
