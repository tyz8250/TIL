2024-11

11/11
TILのリポジトリを作成。
クラスを使用して、名前関数を作成すると、クラス外の関数との名前の被りがなくなる。

class MathThings():
    # 数値を受け取り、加算を実行
    def add(x,y):
        return x + y

# 文字列を受け取り、連結を実行
def add(s1, s2):
    return s1 + s2

# 名前空間のおかげで名前が衝突せずに済みます
print(MathThings.add(5,4))
print(add("hello", "world"))

11/12
git push -u origin main 
-u オプションはこれ以降、git push コマンドを実行する際に、ブランチ名を省略できる。

述語とは、真偽どちらかの答えを返す関数または式のこと。ある条件が真か偽かを判定することができる。

# 国を文字列として受け取り、言語を返す関数
def languageSetting(country):
    # 述語 country == "Japan" が true の場合、以下の処理が実行されます
    if country == "Japan": 
        return "ja"
 
print(languageSetting("Japan"))

if文の省略
関数の戻り値がブーリアン型であれば、if文を省略して、単に述語の結果を返すことができる。
if文は条件としてブール値を期待するので、if文を使わず、単純に述語の結果を直接返すことができる。

論理演算子
『かつ』を表す　論理積（＆＆）演算子

true && true
// true

true && false
// false

false && true
// false

false && false
// false

『または』を表す　論理和（||）演算子
true || true
// true

true || false
// true

false || true
// true

false || false
// false

等価演算子 != 

11/13
if文の文法
def isLeapYear(year):
    # 関数を完成させてください
    if year % 400 == 0 :
        return True
    elif year % 100 == 0  :
        return False
    elif year % 4  == 0 :
        return True

    ＃elif のあとは:不要

11/14
and not 

11/15
ライブラリ(library)関数を使用する場合は、以下3点の理解が必要。
その関数の目的
必要な入力
生成される出力
ライブラリの公式ドキュメントには、これらの情報が記載されている。






